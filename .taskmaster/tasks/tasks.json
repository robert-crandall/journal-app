{
  "master": {
    "tasks": [
      {
        "id": 1,
        "title": "Implement User Authentication",
        "description": "Develop user registration, login, and logout functionality to secure access to the app.",
        "details": "Use a secure authentication system (e.g., JWT or OAuth). Implement backend endpoints for user registration, login, and logout. Store passwords securely with hashing (bcrypt). Ensure session management or token expiration. Frontend forms for registration and login with validation.",
        "testStrategy": "Test user registration with valid and invalid inputs, login with correct and incorrect credentials, logout functionality, and session/token expiration. Perform security testing for password storage and authentication flows.",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 2,
        "title": "Create Character Creation Module",
        "description": "Allow users to create a personalized character with a class selection and backstory.",
        "details": "Implement backend data models for Character with fields: user_id, class (predefined list + custom), and backstory text. Provide API endpoints to create, update, and retrieve the character. Frontend UI for selecting class from predefined list or entering a custom class and entering a freeform backstory.",
        "testStrategy": "Verify character creation with predefined and custom classes, backstory input, and retrieval. Test validation for required fields and character uniqueness per user.",
        "priority": "high",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 3,
        "title": "Develop Stats System",
        "description": "Implement predefined and custom stats with XP tracking and leveling mechanics.",
        "details": "Create Stats data model with fields for name, XP total, and level linked to user and character. Provide API to add predefined and custom stats. Implement XP accumulation and level calculation logic (level up requires Current Level * 100 XP). Allow manual level-up triggering with title assignment deferred to AI integration.",
        "testStrategy": "Test adding predefined and custom stats, XP accumulation, level calculation correctness, and manual level-up process. Validate data integrity and user association.",
        "priority": "high",
        "dependencies": [
          2
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 4,
        "title": "Implement Goals and Family Members Management",
        "description": "Enable users to define personal goals and add family members with descriptive context.",
        "details": "Create Goals and Family Members models linked to user. Goals stored as freeform text. Family Members include name and description fields. Provide API endpoints for CRUD operations. Frontend UI for managing goals and family members with validation.",
        "testStrategy": "Verify creation, update, retrieval, and deletion of goals and family members. Test input validation and data association with user.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 5,
        "title": "Build Simple Todos and Task Completion with XP Granting",
        "description": "Allow users to create, view, and complete simple tasks that grant XP to relevant stats.",
        "details": "Implement Todo task model with fields for description, completion status, and associated stats for XP. Backend logic to grant XP upon task completion and update stats accordingly. Frontend UI for task management and completion with immediate XP feedback animation.",
        "testStrategy": "Test task creation, viewing, completion, and XP awarding. Validate XP updates on stats and UI feedback correctness.",
        "priority": "high",
        "dependencies": [
          3
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 6,
        "title": "Create Basic Conversational Journal Feature",
        "description": "Implement a conversational journal with predefined questions and save user entries.",
        "details": "Design journal data model to store conversation entries linked to user. Provide API to start journal with predefined questions and save conversation. Frontend conversational UI to display questions and capture user responses. Include a user action (e.g., button) to end the journal session.",
        "testStrategy": "Validate journal start, question display, entry saving, and session end trigger. Test data persistence and retrieval.",
        "priority": "medium",
        "dependencies": [
          1
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 7,
        "title": "Integrate AI for Level Titles and Daily Task Generation",
        "description": "Use GPT to generate creative stat level titles and personalized daily tasks based on user context.",
        "details": "Integrate GPT API to generate humorous stat level titles on manual level-up. Implement daily task generation using GPT with inputs: character class/backstory, goals, daily focus, family members, projects, and weather data. Schedule daily task generation and store tasks for user.",
        "testStrategy": "Test GPT integration for title generation and task creation. Validate task relevance, uniqueness, and correct context usage. Verify daily scheduling and storage.",
        "priority": "high",
        "dependencies": [
          3,
          4,
          5
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 8,
        "title": "Implement AI Journal Analysis and XP Granting",
        "description": "Process journal entries with GPT to extract summaries, tags, and grant XP to relevant stats.",
        "details": "Send completed journal entries to GPT for analysis to extract summary, synopsis, title, content tags, and character stat tags. Store analysis results linked to the journal entry. Grant XP to stats identified in character stat tags. Update user stats accordingly.",
        "testStrategy": "Validate GPT analysis output correctness and storage. Test XP granting logic and stat updates. Verify journal entry linkage.",
        "priority": "high",
        "dependencies": [
          6,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 9,
        "title": "Develop Quest, Experiment, and Project Management",
        "description": "Allow users to create and manage long-term quests, short-term experiments, and projects with associated tasks.",
        "details": "Create data models for Quests, Experiments, and Projects with task associations. Implement CRUD APIs and frontend UI for management. Ensure quests influence AI task generation context; experiments do not. Support experiment conclusions and quest-experiment associations.",
        "testStrategy": "Test creation, update, deletion, and retrieval of quests, experiments, projects, and tasks. Validate AI context usage and experiment conclusion handling.",
        "priority": "medium",
        "dependencies": [
          5,
          7
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 10,
        "title": "Build Main and Specialized Dashboards with Weather API Integration",
        "description": "Design dashboards to display tasks, progress, XP, and journal access with real-time weather data integration.",
        "details": "Integrate a real weather API to fetch user location weather for AI context. Develop main dashboard showing today's tasks with XP animations and running XP total. Implement quest and experiment dashboards showing progress, tasks, journal entries, and XP. Provide quick journal entry access. Ensure UI is optimized for INTJ + ADHD personas with clear hierarchy and feedback.",
        "testStrategy": "Test weather API integration and data accuracy. Validate dashboard task display, XP animations, progress tracking, and journal access. Perform UI/UX testing for clarity and responsiveness.",
        "priority": "medium",
        "dependencies": [
          5,
          7,
          9
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-03T22:12:49.737Z",
      "updated": "2025-07-03T22:12:49.737Z",
      "description": "Tasks for master context"
    }
  }
}