// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  posts         Post[]
  character     Character?
  stats         Stat[]
  goals         Goal[]
  familyMembers FamilyMember[]
  todos         Todo[]
  quests        Quest[]
  experiments   Experiment[]
  projects      Project[]
  journalEntries JournalEntry[]

  @@map("users")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Post {
  id        String   @id @default(cuid())
  title     String
  content   String?  @db.Text
  published Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  authorId  String

  author User @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("posts")
}

model Character {
  id        String   @id @default(cuid())
  class     String
  backstory String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String   @unique

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("characters")
}

model Stat {
  id        String   @id @default(cuid())
  name      String
  xp        Int      @default(0)
  level     Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  levelTitle String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, name])
  @@map("stats")
}

model Goal {
  id          String   @id @default(cuid())
  description String   @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}

model FamilyMember {
  id          String   @id @default(cuid())
  name        String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("family_members")
}

model Todo {
  id        String   @id @default(cuid())
  title     String
  completed Boolean  @default(false)
  xpAwarded Int?
  statId    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  questId   String?
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest? @relation(fields: [questId], references: [id])

  @@map("todos")
}

model Quest {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completed   Boolean  @default(false)
  userId      String
  
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  todos Todo[]
  experiments Experiment[]

  @@map("quests")
}

model Experiment {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  conclusion  String?  @db.Text
  startDate   DateTime @default(now())
  endDate     DateTime?
  completed   Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  questId     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  quest Quest? @relation(fields: [questId], references: [id])

  @@map("experiments")
}

model Project {
  id          String   @id @default(cuid())
  title       String
  description String?  @db.Text
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("projects")
}

model JournalEntry {
  id        String   @id @default(cuid())
  title     String?
  content   String   @db.Text
  summary   String?  @db.Text
  synopsis  String?
  tags      String[] @default([])
  statTags  String[] @default([])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("journal_entries")
}
